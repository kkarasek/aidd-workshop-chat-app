---
alwaysApply: false
---

# Project Specification: AI DD Chat App

## 1. Project Goal

The primary goal is to build the frontend and backend for a simple "ChatGPT-like" application. The application will feature a main chat interface, a history of conversations, and the core API to support these features. The focus is on a high-quality, maintainable codebase using a modern tech stack.

## 2. Core Features

-   **Welcome Screen:** A default view that prompts the user to start a new chat or select an existing one.
-   **Chat Interface:** A clean, interactive window for sending messages to and receiving (dummy) responses from the agent.
-   **Conversation History:** A sidebar that lists all past conversations, allowing the user to switch between them.
-   **Persistent Conversations:** Chat history is saved and will persist across browser sessions.
-   **Navigation Bar:** A top navigation bar with logo and new chat functionality.
-   **Integrated Input:** Modern chat input component with send button and character count.

## 3. Tech Stack (As Implemented)

-   **Framework:** Nuxt.js 3.17.6
-   **Language:** TypeScript (with `<script setup>`)
-   **Styling:** Tailwind CSS 3.4.0 via `@nuxtjs/tailwindcss` module
-   **UI Components:** Custom components built with Tailwind CSS (no UI library)
-   **ORM:** Drizzle ORM 0.44.2
-   **Database:** MySQL (via `mysql2` driver)
-   **API Documentation:** Scalar (prepared but not implemented)
-   **Build Tools:** tsx for TypeScript execution (used in database seeding)
-   **Environment:** dotenv for environment variable management
-   **Additional Dependencies:**
    -   `@nuxtjs/tailwindcss` module for Tailwind integration
    -   `tailwindcss-animate` for component animations
    -   `tailwind-merge` for conditional styling
    -   `lucide-vue-next` for icons
    -   `class-variance-authority` and `clsx` for component variants
    -   `radix-vue` for accessible component primitives
    -   `shadcn-vue` (installed but not used - custom Tailwind preferred)

## 4. Database Schema (As Implemented)

We use two main tables with MySQL:

1.  **`conversations`**
    -   `id` (Primary Key, Serial/Auto-increment)
    -   `topic` (Text, nullable)
    -   `createdAt` (Timestamp, default now)
    -   `updatedAt` (Timestamp, default now, updates on change)

2.  **`messages`**
    -   `id` (Primary Key, Serial/Auto-increment)
    -   `conversationId` (Integer, Foreign Key -> `conversations.id`)
    -   `role` (VARCHAR(16), 'user' or 'assistant')
    -   `content` (Text, not null)
    -   `createdAt` (Timestamp, default now)

**Database Configuration:**
- Uses `mysql2` connection pool
- Configured via `NUXT_DATABASE_URL` environment variable
- Drizzle migrations stored in `server/db/migrations/`
- Seed script available via `pnpm run db:seed` (uses tsx for execution)
- Database relations properly defined with Drizzle ORM

## 5. API Endpoints (As Implemented)

All endpoints are created under the `/api` directory in Nuxt:

-   **Conversations API**
    -   `GET /api/conversations`: Fetch all conversations (✅ Implemented)
    -   `GET /api/conversations/:id`: Fetch a single conversation with all its messages (✅ Implemented)
    -   `POST /api/conversations`: Create a new, empty conversation (✅ Implemented)
    -   `PUT /api/conversations/:id`: Update a conversation topic (✅ Implemented)
    -   `DELETE /api/conversations/:id`: Delete a conversation and all its messages (✅ Implemented)

-   **Chat API**
    -   `POST /api/chat`: Send a new message within a conversation. Adds the user's message and a dummy assistant response (✅ Implemented)

## 6. Frontend Components (As Implemented)

**Architecture:**
-   **`app.vue`**: The main entry point with metadata configuration and global layout wrapper
-   **Layouts (`layouts/default.vue`)**: A default layout including the sidebar and the main content area
-   **Components (`components/`)**:
    -   **`AppNavbar.vue`**: Top navigation bar with logo and new chat button *(Added)*
    -   **`ConversationHistory.vue`**: The sidebar component to list conversations
    -   **`ChatWindow.vue`**: The main component for displaying messages and the message input form
    -   **`WelcomeScreen.vue`**: A component shown when no conversation is selected *(Renamed from Welcome.vue)*
-   **Pages (`pages/`)**:
    -   **`index.vue`**: The main page, which shows the Welcome component by default
    -   **`[id].vue`**: A dynamic page to display a specific chat conversation

**Implementation Notes:**
- Successfully implemented as a Single-Page Application (SPA) as intended
- Uses Nuxt's built-in `useFetch` and `$fetch` for API communication
- Reactive state management through Vue 3 Composition API
- Real-time UI updates after API operations

## 7. Design System (As Implemented)

**Theme: Sophisticated Dark with White-Black-Silver Gradients**

**Color Palette:**
- **Background Gradient:** `from-[#0a0a0a] via-[#1a1a1a] to-[#0f0f0f]`
- **Transparency Effects:** `bg-white/10`, `bg-black/20`, `bg-white/5`
- **Text Colors:** `text-white`, `text-gray-300`, `text-gray-400`
- **Accent Elements:** `bg-white/20` for interactive elements

**Design Principles:**
- **Glass-morphism:** Transparent backgrounds with `backdrop-blur-sm`
- **Subtle Animations:** `hover:scale-[1.02]` with `transition-all duration-200`
- **Minimal Contrast:** Elegant, low-contrast design inspired by Linear, Cursor, and Vercel
- **No Blue Tones:** Strictly white-black-silver color scheme
- **Modern Typography:** Clean, readable text hierarchy

**Component Styling:**
- **Navbar:** Transparent header with subtle logo and new chat button
- **Sidebar:** Glass-morphism conversation list with hover effects
- **Chat Window:** Transparent message bubbles with distinct user/assistant styling
- **Input Component:** Integrated design with send button inside textarea frame
- **Welcome Screen:** Centered layout with transparent call-to-action

## 8. Key Features Added

**Beyond Original Specification:**

1. **Metadata Configuration:**
   - SEO-friendly meta description
   - Proper HTML lang attribute
   - Viewport and charset configuration
   - Title: "AIDD Chat"

2. **Enhanced Input Component:**
   - Send button integrated within textarea
   - Character count display
   - Loading states and animations
   - Smart placeholder text

3. **Navigation Enhancement:**
   - Logo branding in top navbar
   - Convenient "New Chat" button
   - Responsive mobile-friendly design

4. **Database Seeding:**
   - Comprehensive seed script with sample conversations
   - Development-friendly data for testing

5. **Advanced Styling:**
   - Global gradient background
   - Sophisticated hover effects
   - Glass-morphism design language
   - Consistent animation timing

## 9. Development Workflow

**Scripts:**
- `pnpm dev`: Start development server
- `pnpm build`: Build for production
- `pnpm db:seed`: Populate database with sample data

**Database Management:**
- Drizzle Kit for migrations: `npx drizzle-kit generate` and `npx drizzle-kit migrate`
- MySQL connection via environment variables
- Schema changes tracked through migration files

**Code Quality:**
- ESLint configuration via `@nuxt/eslint` module
- Consistent component structure with `<script setup>`
- Type-safe API communication with Drizzle ORM
- TypeScript strict mode configuration

## 10. Future Enhancements

**Prepared but Not Implemented:**
- **Scalar API Documentation:** Dependency installed, ready for configuration
- **Advanced Testing:** Test utilities available via `@nuxt/test-utils`
- **shadcn-vue Components:** Library installed but custom Tailwind preferred

**Potential Improvements:**
- Real AI integration (currently uses dummy responses)
- User authentication and multi-user support
- Message editing and deletion
- File upload and media support
- Real-time messaging with WebSockets
- Advanced conversation management (folders, tags, search)
